[{"C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\index.js":"1","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\App.js":"2","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\PanelPatient\\PanelPatient.js":"3","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\PanelDoctor\\PanelDoctor.js":"4","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\MenuAdmin\\MenuAdmin.js":"5","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\ModalEditPatient\\ModalEditPatient.js":"6","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\ModalEditDoctor\\ModalEditDoctor.js":"7","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\pages\\Home\\Home.js":"8","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\ModalDeleteDoctor\\ModalDeleteDoctor.js":"9","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\ModalDeletePatient\\ModalDeletePatient.js":"10","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\ModalAddDoctor\\ModalAddDoctor.js":"11","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\ModalAddPatient\\ModalAddPatient.js":"12","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\PanelCita\\PanelCita.js":"13","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\ModalAddCita\\ModalAddCita.js":"14"},{"size":212,"mtime":1610923031768,"results":"15","hashOfConfig":"16"},{"size":128,"mtime":1610923024440,"results":"17","hashOfConfig":"16"},{"size":7780,"mtime":1610922627681,"results":"18","hashOfConfig":"16"},{"size":7939,"mtime":1610922452247,"results":"19","hashOfConfig":"16"},{"size":1630,"mtime":1610921714496,"results":"20","hashOfConfig":"16"},{"size":4577,"mtime":1610817815526,"results":"21","hashOfConfig":"16"},{"size":4560,"mtime":1610817807758,"results":"22","hashOfConfig":"16"},{"size":451,"mtime":1610921284764,"results":"23","hashOfConfig":"16"},{"size":1712,"mtime":1610822692558,"results":"24","hashOfConfig":"16"},{"size":1757,"mtime":1610823169025,"results":"25","hashOfConfig":"16"},{"size":5078,"mtime":1610922853698,"results":"26","hashOfConfig":"16"},{"size":5023,"mtime":1610933711521,"results":"27","hashOfConfig":"16"},{"size":3190,"mtime":1610922998527,"results":"28","hashOfConfig":"16"},{"size":3839,"mtime":1610923001475,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"d8hqgr",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"32"},"C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\index.js",[],["67","68"],"C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\App.js",[],"C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\PanelPatient\\PanelPatient.js",["69","70"],"import { useState, useEffect, useCallback } from 'react';\r\nimport { Table, Container, Input, Button, Menu, Icon } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport ModalDeletePatient from '../ModalDeletePatient/ModalDeletePatient';\r\nimport ModalEditPatient from '../ModalEditPatient/ModalEditPatient';\r\nimport ModalAddPatient from '../ModalAddPatient/ModalAddPatient';\r\n\r\n\r\nimport \"./PanelPatient.scss\";\r\n\r\nexport default function PanelPatient() {\r\n\r\n    const [state, setState] = useState([]);\r\n    const [update, setUpdate] = useState(false);\r\n\r\n    const [count, setCount] = useState(0);\r\n    const [dataTablePatient, setDataTablePatient] = useState([]);\r\n\r\n    const fetchData = useCallback(async () => {\r\n        const uri = \"http://localhost:7789/api/pacientes/listar-pacientes\";\r\n        try {\r\n            setUpdate(false)\r\n            const  { data } = await axios.get(uri);\r\n            setState(data.data)\r\n            //console.log(data.data)\r\n            //console.log(update)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [update])\r\n\r\n    const fetchPatient = async (dniPatient) => {\r\n        const uri = \"http://localhost:7789/api/pacientes/buscar-paciente\";\r\n        try {\r\n            setUpdate(false)\r\n            const  { data } = await axios.post(uri, {_dni: dniPatient} );\r\n            setState(data.data);\r\n            //console.log(data.data)\r\n            console.log(update)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const handleKeyDown =  (e) => {\r\n        if (e.key === 'Enter') {\r\n            console.log(e.target.value);\r\n            fetchPatient(e.target.value)\r\n        }\r\n    }\r\n\r\n    const handleAddDataTable = () => {\r\n        if(count<state.length-4){\r\n            setCount(count + 4)\r\n            setDataTablePatient([...state].slice(count, count + 4))\r\n            console.log(count)\r\n        }\r\n    }\r\n\r\n    const handleBackDataTable = () => {\r\n        if(count >= 0){\r\n            setCount(count - 4)\r\n            setDataTablePatient([...state].slice(count, count + 4))\r\n            console.log(count)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData(); \r\n    }, [fetchData])\r\n\r\n    useEffect(() => {\r\n        setDataTablePatient([...state].slice(count, count + 4));\r\n        console.log(dataTablePatient)\r\n        console.log(count)\r\n        console.log(\"2do useEffect\")\r\n    }, [count, state])\r\n\r\n    return(\r\n        <Container>\r\n            <Container>\r\n                    <Input \r\n                        className=\"input-container\"\r\n                        icon='search'\r\n                        size=\"small\"\r\n                        placeholder='Buscar...' \r\n                        onKeyDown={handleKeyDown}\r\n                    />\r\n                    <Button \r\n                        icon\r\n                        primary\r\n                        className=\"button-container\"\r\n                    >\r\n                        <ModalAddPatient updateAddPatient={setUpdate}/>\r\n                    </Button>\r\n            </Container>\r\n            <Container>\r\n                <Table celled className=\"tabla-paciente\">\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Nombre</Table.HeaderCell>\r\n                            <Table.HeaderCell>Edad</Table.HeaderCell>\r\n                            <Table.HeaderCell>Documento</Table.HeaderCell>\r\n                            <Table.HeaderCell>Tel√©fono</Table.HeaderCell>\r\n                            <Table.HeaderCell>Eliminar / Editar</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {\r\n                            dataTablePatient.map( patient => (\r\n                                <Table.Row key={patient.id_paciente}>\r\n                                    <Table.Cell> \r\n                                        {patient.nombre} {patient.apellido_paterno} {patient.apellido_materno} \r\n                                    </Table.Cell>\r\n                                    <Table.Cell> {patient.edad} </Table.Cell>\r\n                                    <Table.Cell>{patient.dni}</Table.Cell>\r\n                                    <Table.Cell>{patient.telefono}</Table.Cell>\r\n                                    <Table.Cell className=\"edit-delete\">\r\n                                        <div>\r\n                                            <Button \r\n                                                icon\r\n                                                circular\r\n                                                inverted \r\n                                                color='red'\r\n                                                className=\"button-container\"\r\n                                            >\r\n                                                <ModalDeletePatient pacienteDelete={patient} updateDelete={setUpdate} />\r\n                                            </Button>\r\n                                            <Button \r\n                                                icon\r\n                                                circular\r\n                                                inverted \r\n                                                color='yellow'\r\n                                                className=\"button-container\"\r\n                                            >\r\n                                                <ModalEditPatient paciente={patient} updateState={setUpdate}/>\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Table.Cell>\r\n                                </Table.Row>\r\n                            ))\r\n                        }\r\n                    </Table.Body>\r\n                    <Table.Footer>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell colSpan='6'>\r\n                                <Menu floated='right' pagination>\r\n                                    <Menu.Item as='a' icon >\r\n                                        <Button\r\n                                            disabled={\r\n                                                count===0\r\n                                                ? true\r\n                                                : false\r\n                                            }\r\n                                            icon\r\n                                            onClick={handleBackDataTable}\r\n                                        >\r\n                                            <Icon name='chevron left' />\r\n                                        </Button>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item as='a' icon>\r\n                                        <Button\r\n                                            disabled={\r\n                                                count>state.length\r\n                                                ? true\r\n                                                : false\r\n                                            }\r\n                                            icon\r\n                                            onClick={handleAddDataTable}\r\n                                        >\r\n                                            <Icon name='chevron right'/>\r\n                                        </Button>\r\n                                    </Menu.Item>\r\n                                </Menu>\r\n                            </Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Footer>\r\n                </Table>\r\n            </Container>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\PanelDoctor\\PanelDoctor.js",["71","72"],"import { useState, useEffect, useCallback } from 'react';\r\nimport { Table, Button, Container, Input, Menu, Icon } from 'semantic-ui-react';\r\n\r\nimport ModalDeleteDoctor from '../ModalDeleteDoctor/ModalDeleteDoctor';\r\nimport ModalEditDoctor from '../ModalEditDoctor/ModalEditDoctor';\r\nimport ModalAddDoctor from '../ModalAddDoctor/ModalAddDoctor';\r\nimport axios from 'axios';\r\n\r\nimport \"./PanelDoctor.scss\";\r\n\r\nexport default function PanelDoctor() {\r\n\r\n    const [state, setState] = useState([]);\r\n    const [updateState, setUpdateState] = useState(false);\r\n\r\n    const [counter, setCounter] = useState(0);\r\n    const [dataTable, setDataTable] = useState([]);\r\n\r\n    const fetchData = useCallback(async () => {\r\n        const uri = \"http://localhost:7789/api/medicos/listar-medicos\";\r\n        try {\r\n            setUpdateState(false)\r\n            const  { data } = await axios.get(uri);\r\n            setState(data.data)\r\n            console.log(data.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [updateState])\r\n\r\n    const fetchDoctor = async (dniDoctor) => {\r\n        const uri = \"http://localhost:7789/api/medicos/buscar-medico\";\r\n        try {\r\n            setUpdateState(false)\r\n            const  { data } = await axios.post(uri, {_dni: dniDoctor} );\r\n            setState(data.data);\r\n            //console.log(data.data)\r\n            console.log(updateState)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const handleKeyDown =  (e) => {\r\n        if (e.key === 'Enter') {\r\n            console.log(e.target.value);\r\n            fetchDoctor(e.target.value)\r\n        }\r\n    }\r\n\r\n    const handleAddDataTable = () => {\r\n        if(counter<state.length-4){\r\n            setCounter(counter + 4)\r\n            setDataTable([...state].slice(counter, counter + 4))\r\n            console.log(counter)\r\n        }\r\n    }\r\n\r\n    const handleBackDataTable = () => {\r\n        if(counter >= 0){\r\n            setCounter(counter - 4)\r\n            setDataTable([...state].slice(counter, counter + 4))\r\n            console.log(counter)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData(); \r\n    }, [fetchData])\r\n\r\n    useEffect(() => {\r\n        setDataTable([...state].slice(counter, counter + 4));\r\n        console.log(dataTable)\r\n        console.log(counter)\r\n        console.log(\"2do useEffect\")\r\n    }, [counter, state])\r\n\r\n    return(\r\n        <Container>\r\n            <Container>\r\n                    <Input \r\n                        className=\"input-container\"\r\n                        icon='search'\r\n                        size=\"small\"\r\n                        placeholder='Buscar...' \r\n                        onKeyDown={handleKeyDown}\r\n                    />\r\n                    <Button \r\n                        icon\r\n                        primary\r\n                        className=\"button-container\"\r\n                    >  \r\n                        <ModalAddDoctor addUpdateState={setUpdateState} />\r\n                    </Button>\r\n            </Container>\r\n            <Container>\r\n                <Table celled >\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Nombre</Table.HeaderCell>\r\n                            <Table.HeaderCell>Edad</Table.HeaderCell>\r\n                            <Table.HeaderCell>Documento</Table.HeaderCell>\r\n                            <Table.HeaderCell>Ingreso</Table.HeaderCell>\r\n                            <Table.HeaderCell>Especialidad</Table.HeaderCell>\r\n                            <Table.HeaderCell>Eliminar / Editar</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {\r\n                            dataTable.map( doctor => {\r\n                                \r\n                                return (\r\n                                <Table.Row key={doctor.id_medico}>\r\n                                    <Table.Cell> {doctor.nombre} {doctor.apellido_paterno} {doctor.apellido_materno} </Table.Cell>\r\n                                    <Table.Cell> {doctor.edad} </Table.Cell>\r\n                                    <Table.Cell>{doctor.dni}</Table.Cell>\r\n                                    <Table.Cell>\r\n                                        {doctor.fecha_ingreso.slice(0,10)}\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>{doctor.especialidad}</Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <div>\r\n                                            <Button \r\n                                                icon\r\n                                                circular\r\n                                                inverted \r\n                                                color='red'\r\n                                                className=\"button-container\"\r\n                                            >\r\n                                                <ModalDeleteDoctor doctor={doctor} updateRemove={setUpdateState} />\r\n                                            </Button>\r\n                                            <Button \r\n                                                icon\r\n                                                circular\r\n                                                inverted \r\n                                                color='yellow'\r\n                                                className=\"button-container\"\r\n                                            >\r\n                                                <ModalEditDoctor medico={doctor} updateState={setUpdateState}/>\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Table.Cell>\r\n                                </Table.Row>\r\n                            )})\r\n                        }\r\n                    </Table.Body>\r\n                    <Table.Footer>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell colSpan='6'>\r\n                                <Menu floated='right' pagination>\r\n                                    <Menu.Item as='a' icon >\r\n                                        <Button\r\n                                            disabled={\r\n                                                counter===0\r\n                                                ? true\r\n                                                : false\r\n                                            }\r\n                                            icon\r\n                                            onClick={handleBackDataTable}\r\n                                        >\r\n                                            <Icon name='chevron left' />\r\n                                        </Button>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item as='a' icon>\r\n                                        <Button\r\n                                            disabled={\r\n                                                counter>state.length\r\n                                                ? true\r\n                                                : false\r\n                                            }\r\n                                            icon\r\n                                            onClick={handleAddDataTable}\r\n                                        >\r\n                                            <Icon name='chevron right'/>\r\n                                        </Button>\r\n                                    </Menu.Item>\r\n                                </Menu>\r\n                            </Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Footer>\r\n                </Table>\r\n            </Container>\r\n        </Container>\r\n    );\r\n}\r\n","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\MenuAdmin\\MenuAdmin.js",[],"C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\ModalEditPatient\\ModalEditPatient.js",[],"C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\ModalEditDoctor\\ModalEditDoctor.js",["73"],"import { useState } from 'react';\r\nimport axios from \"axios\";\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Button, Header, Icon, Modal, Form} from 'semantic-ui-react';\r\n\r\nconst ModalEditDoctor = ({ medico, updateState }) => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            _nombre: medico.nombre,\r\n            _apellido_paterno: medico.apellido_paterno,\r\n            _apellido_materno: medico.apellido_materno,\r\n            _edad: medico.edad,\r\n            _dni: medico.dni,\r\n            _especialidad: medico.especialidad\r\n        },\r\n        validationSchema: Yup.object({\r\n            _nombre: Yup.string().required(true),\r\n            _apellido_paterno: Yup.string().required(true),\r\n            _apellido_materno: Yup.string().required(true),\r\n            _edad: Yup.number().required(true),\r\n            _dni: Yup.number().required(true),\r\n            _especialidad: Yup.string().required(true),\r\n        }),\r\n        onSubmit: async (dataForm) => {\r\n            const uri = \"http://localhost:7789/api/medicos/actualizar-medico\";\r\n            const updateMedico = { \r\n                _id_medico: medico.id_medico, \r\n                _id_persona: medico.id_persona, \r\n                ...dataForm\r\n            }\r\n            try {               \r\n                const { data } = await axios.put(uri, updateMedico);\r\n                //console.log(dataForm);\r\n                //console.log(data)\r\n                setOpen(false);\r\n                updateState(true);\r\n            } catch (error) {\r\n                console.log(error.message)\r\n            }\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Modal\r\n            closeIcon\r\n            open={open}\r\n            trigger={<Icon name=\"edit\"/>}\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            size=\"mini\"\r\n        >\r\n            <Header icon='user md' content='Editar M√©dico' />\r\n            <Modal.Content>\r\n                <Form onSubmit={formik.handleSubmit} >\r\n                    <Form.Input \r\n                        type=\"text\" \r\n                        placeholder={medico.nombre} \r\n                        name=\"_nombre\"\r\n                        value={formik.values._nombre}\r\n                        onChange={formik.handleChange}\r\n                        error={formik.errors._nombre}\r\n                    />\r\n                    <Form.Input \r\n                        type=\"text\" \r\n                        placeholder={medico.apellido_paterno} \r\n                        name=\"_apellido_paterno\"\r\n                        value={formik.values._apellido_paterno}\r\n                        onChange={formik.handleChange}\r\n                        error={formik.errors._apellido_paterno}\r\n                    />\r\n                    <Form.Input \r\n                        type=\"text\" \r\n                        placeholder={medico.apellido_materno} \r\n                        name=\"_apellido_materno\"\r\n                        value={formik.values._apellido_materno}\r\n                        onChange={formik.handleChange}\r\n                        error={formik.errors._apellido_materno}\r\n                    />\r\n                    <Form.Input \r\n                        type=\"text\" \r\n                        placeholder={medico.edad} \r\n                        name=\"_edad\"\r\n                        value={formik.values._edad}\r\n                        onChange={formik.handleChange}\r\n                        error={formik.errors._edad}\r\n                    />\r\n                    <Form.Input \r\n                        type=\"text\" \r\n                        placeholder={medico.dni} \r\n                        name=\"_dni\"\r\n                        value={formik.values._dni}\r\n                        onChange={formik.handleChange}\r\n                        error={formik.errors._dni}\r\n                    />\r\n                    <Form.Input \r\n                        type=\"text\" \r\n                        placeholder={medico.especialidad} \r\n                        name=\"_especialidad\"\r\n                        value={formik.values._especialidad}\r\n                        onChange={formik.handleChange}\r\n                        error={formik.errors._especialidad}\r\n                    />\r\n                    <Button type=\"submit\" primary className=\"btn-submit\">\r\n                        Actualizar\r\n                    </Button>\r\n                </Form>\r\n            </Modal.Content>\r\n        </Modal>    \r\n    );\r\n}\r\n\r\nexport default ModalEditDoctor;","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\pages\\Home\\Home.js",[],"C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\ModalDeleteDoctor\\ModalDeleteDoctor.js",["74"],"import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react';\r\n\r\nexport default function ModalDeleteDoctor({ doctor, updateRemove }) {\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleDelete = async () => {\r\n        const idPersona = doctor.id_persona;\r\n        const uri = `http://localhost:7789/api/medicos/eliminar-medico/${idPersona}`;\r\n        try {\r\n            const  { data } = await axios.delete(uri);\r\n            updateRemove(true)\r\n            //console.log(data.data)\r\n            //console.log(updateRemove)\r\n            setOpen(false)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            basic\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            open={open}\r\n            size='mini'\r\n            trigger={<Icon name=\"user delete\"/>}\r\n        >\r\n            <Header icon>\r\n                <Icon name='archive' />\r\n                Eliminar usuario\r\n            </Header>\r\n            <Modal.Content>\r\n                    <p>Esta seguro que desea eliminar al doctor</p>\r\n                    <h4>{ doctor.nombre } { doctor.apellido_paterno } { doctor.apellido_materno }</h4>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button basic color='red' inverted onClick={() => setOpen(false)}>\r\n                    <Icon name='remove' /> No\r\n                </Button>\r\n                <Button color='green' inverted onClick={handleDelete}>\r\n                    <Icon name='checkmark' /> S√≠\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\ModalDeletePatient\\ModalDeletePatient.js",["75"],"import { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react';\r\n\r\nexport default function ModalDeletePatient({ pacienteDelete, updateDelete }) {\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleDelete = async () => {\r\n        const idPersona = pacienteDelete.id_persona;\r\n        const uri = `http://localhost:7789/api/pacientes/eliminar-paciente/${idPersona}`;\r\n        try {\r\n            const  { data } = await axios.delete(uri);\r\n            updateDelete(true)\r\n            //console.log(data.data)\r\n            //console.log(updateRemove)\r\n            setOpen(false)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            basic\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            open={open}\r\n            size='mini'\r\n            trigger={<Icon name=\"user delete\"/>}\r\n        >\r\n            <Header icon>\r\n                <Icon name='archive' />\r\n                Eliminar usuario\r\n            </Header>\r\n            <Modal.Content>\r\n                    <p>Esta seguro que desea eliminar al doctor</p>\r\n                    <h4>{ doctor.nombre } { doctor.apellido_paterno } { doctor.apellido_materno }</h4>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button basic color='red' inverted onClick={() => setOpen(false)}>\r\n                    <Icon name='remove' /> No\r\n                </Button>\r\n                <Button color='green' inverted onClick={handleDelete}>\r\n                    <Icon name='checkmark' /> S√≠\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\ModalAddDoctor\\ModalAddDoctor.js",["76"],"import { useState } from 'react';\r\nimport axios from \"axios\";\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Button, Header, Icon, Modal, Form} from 'semantic-ui-react';\r\n\r\nimport \"./ModalAddDoctor.scss\";\r\n\r\nconst ModalAddDoctor = ({ addUpdateState }) => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const dateNow = () => {\r\n        const date = new Date();\r\n        const day = date.getDate();\r\n        const month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n        if(month < 10){\r\n            return `${year}-0${month}-${day}`;\r\n        }else{\r\n            return `${year}-${month}-${day}`;\r\n        }\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            _nombre: \"\",\r\n            _apellido_paterno: \"\",\r\n            _apellido_materno: \"\",\r\n            _edad: \"\",\r\n            _dni: \"\",\r\n            _especialidad: \"\"\r\n        },\r\n        validationSchema: Yup.object({\r\n            _nombre: Yup.string().required(true),\r\n            _apellido_paterno: Yup.string().required(true),\r\n            _apellido_materno: Yup.string().required(true),\r\n            _edad: Yup.number().required(true),\r\n            _dni: Yup.number().required(true),\r\n            _especialidad: Yup.string().required(true),\r\n        }),\r\n        onSubmit: async (dataForm) => {\r\n            const uri = \"http://localhost:7789/api/medicos/agregar-medico\";\r\n            const addMedico = { \r\n                    ...dataForm,\r\n                    _fecha_ingreso: dateNow()\r\n                }  \r\n            try {             \r\n                const { data } = await axios.post(uri, addMedico);\r\n                //console.log(dataForm)\r\n                //console.log(data)\r\n                //console.log(addMedico)\r\n                formik.values._nombre = \"\";\r\n                formik.values._apellido_paterno = \"\";\r\n                formik.values._apellido_materno = \"\";\r\n                formik.values._edad = \"\";\r\n                formik.values._dni = \"\";\r\n                formik.values._especialidad = \"\";\r\n                addUpdateState(true);\r\n                setOpen(false);\r\n            } catch (error) {\r\n                alert(\"DNI en uso\")\r\n            }\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Modal\r\n            closeIcon\r\n            open={open}\r\n            trigger={<Icon name=\"add user\"/>}\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            size=\"mini\"\r\n        >\r\n            <Header icon='user md' content='Agregar M√©dico' />\r\n            <Modal.Content>\r\n                <Form onSubmit={formik.handleSubmit} >\r\n                    <Form.Input \r\n                        type=\"text\" \r\n                        placeholder=\"Nombre\" \r\n                        name=\"_nombre\"\r\n                        value={formik.values._nombre}\r\n                        onChange={formik.handleChange}\r\n                        error={formik.errors._nombre}\r\n                    />\r\n                    <Form.Input \r\n                        type=\"text\" \r\n                        placeholder=\"Apellido paterno\" \r\n                        name=\"_apellido_paterno\"\r\n                        value={formik.values._apellido_paterno}\r\n                        onChange={formik.handleChange}\r\n                        error={formik.errors._apellido_paterno}\r\n                    />\r\n                    <Form.Input \r\n                        type=\"text\" \r\n                        placeholder=\"Apellido materno\" \r\n                        name=\"_apellido_materno\"\r\n                        value={formik.values._apellido_materno}\r\n                        onChange={formik.handleChange}\r\n                        error={formik.errors._apellido_materno}\r\n                    />\r\n                    <Form.Input \r\n                        type=\"text\" \r\n                        placeholder=\"Edad\"\r\n                        name=\"_edad\"\r\n                        value={formik.values._edad}\r\n                        onChange={formik.handleChange}\r\n                        error={formik.errors._edad}\r\n                    />\r\n                    <Form.Input \r\n                        type=\"text\" \r\n                        placeholder=\"DNI\"\r\n                        name=\"_dni\"\r\n                        value={formik.values._dni}\r\n                        onChange={formik.handleChange}\r\n                        error={formik.errors._dni}\r\n                    />\r\n                    <Form.Input \r\n                        type=\"text\" \r\n                        placeholder=\"Especialidad\"\r\n                        name=\"_especialidad\"\r\n                        value={formik.values._especialidad}\r\n                        onChange={formik.handleChange}\r\n                        error={formik.errors._especialidad}\r\n                    />\r\n                    <Button type=\"submit\" primary className=\"btn-submit\">\r\n                        Agregar\r\n                    </Button>\r\n                </Form>\r\n            </Modal.Content>\r\n        </Modal>    \r\n    );\r\n}\r\n\r\nexport default ModalAddDoctor;","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\ModalAddPatient\\ModalAddPatient.js",["77"],"C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\PanelCita\\PanelCita.js",["78"],"import { useState, useEffect, useCallback } from 'react';\r\nimport { Table, Button, Container, Input, Menu, Icon } from 'semantic-ui-react';\r\nimport ModalAddCita from '../ModalAddCita/ModalAddCita';\r\nimport axios from 'axios';\r\n\r\nexport default function PanelCita() {\r\n\r\n    const [state, setState] = useState([]);\r\n    const [updateState, setUpdateState] = useState(false);\r\n\r\n    const fetchData = useCallback(async () => {\r\n        const uri = \"http://localhost:7789/api/medicos/listar-medicos\";\r\n        try {\r\n            setUpdateState(false)\r\n            const  { data } = await axios.get(uri);\r\n            setState(data.data)\r\n            //console.log(data.data)\r\n            console.log(updateState)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }, [updateState])\r\n\r\n    useEffect(() => {\r\n        fetchData(); \r\n    }, [fetchData])\r\n\r\n    return(\r\n        <Container>\r\n            <Container>\r\n                    <Button \r\n                        icon\r\n                        primary\r\n                        className=\"button-container\"\r\n                    >\r\n                        <ModalAddCita addUpdateState={setUpdateState} />\r\n                    </Button>\r\n                    <Menu floated='right' pagination>\r\n                                <Menu.Item as='a' icon>\r\n                                    <Icon name='chevron left' />\r\n                                </Menu.Item>\r\n                                <Menu.Item as='a' icon>\r\n                                    <Icon name='chevron right'/>\r\n                                </Menu.Item>\r\n                            </Menu>\r\n            </Container>\r\n            <Container>\r\n                <Table celled >\r\n\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Lunes</Table.HeaderCell>\r\n                            <Table.HeaderCell>Martes</Table.HeaderCell>\r\n                            <Table.HeaderCell>Miercoles</Table.HeaderCell>\r\n                            <Table.HeaderCell>Jueves</Table.HeaderCell>\r\n                            <Table.HeaderCell>Viernes</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {\r\n                            state.map( doctor => {\r\n                                \r\n                                return (\r\n                                <Table.Row key={doctor.id_medico}>\r\n                                    <Table.Cell> {doctor.nombre} {doctor.apellido_paterno} {doctor.apellido_materno} </Table.Cell>\r\n                                    <Table.Cell> {doctor.edad} </Table.Cell>\r\n                                    <Table.Cell>{doctor.dni}</Table.Cell>\r\n                                    <Table.Cell>{doctor.fecha_ingreso.slice(0,10)}</Table.Cell>\r\n                                    <Table.Cell>{doctor.especialidad}</Table.Cell>\r\n                                </Table.Row>\r\n                            )})\r\n                        }\r\n                    </Table.Body>\r\n                </Table>\r\n            </Container>\r\n        </Container>\r\n    );\r\n}\r\n","C:\\Users\\Mario Arango\\Desktop\\clinica\\client\\src\\components\\ModalAddCita\\ModalAddCita.js",["79"],"import { useState } from 'react';\r\nimport axios from \"axios\";\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Button, Header, Icon, Modal, Form, Dropdown} from 'semantic-ui-react';\r\nimport { DateInput } from 'semantic-ui-calendar-react';\r\n\r\nconst ModalAddDoctor = ({ addUpdateState }) => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const dateNow = () => {\r\n        const date = new Date();\r\n        const day = date.getDate();\r\n        const month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n        if(month < 10){\r\n            return `${year}-0${month}-${day}`;\r\n        }else{\r\n            return `${year}-${month}-${day}`;\r\n        }\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            _nombre: \"\",\r\n            _apellido_paterno: \"\",\r\n            _apellido_materno: \"\",\r\n            _edad: \"\",\r\n            _dni: \"\",\r\n            _especialidad: \"\"\r\n        },\r\n        validationSchema: Yup.object({\r\n            _nombre: Yup.string().required(true),\r\n            _apellido_paterno: Yup.string().required(true),\r\n            _apellido_materno: Yup.string().required(true),\r\n            _edad: Yup.number().required(true),\r\n            _dni: Yup.number().required(true),\r\n            _especialidad: Yup.string().required(true),\r\n        }),\r\n        onSubmit: async (dataForm) => {\r\n            const uri = \"http://localhost:7789/api/medicos/agregar-medico\";\r\n            const addMedico = { \r\n                    ...dataForm,\r\n                    _fecha_ingreso: dateNow()\r\n                }  \r\n            try {             \r\n                const { data } = await axios.post(uri, addMedico);\r\n                //console.log(dataForm)\r\n                //console.log(data)\r\n                //console.log(addMedico)\r\n                formik.values._nombre = \"\";\r\n                formik.values._apellido_paterno = \"\";\r\n                formik.values._apellido_materno = \"\";\r\n                formik.values._edad = \"\";\r\n                formik.values._dni = \"\";\r\n                formik.values._especialidad = \"\";\r\n                addUpdateState(true);\r\n                setOpen(false);\r\n            } catch (error) {\r\n                alert(\"DNI en uso\")\r\n            }\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Modal\r\n            closeIcon\r\n            open={open}\r\n            trigger={<Icon name=\"add user\"/>}\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            size=\"mini\"\r\n        >\r\n            <Header icon='user md' content='Agregar M√©dico' />\r\n            <Modal.Content>\r\n                <Form onSubmit={formik.handleSubmit} >\r\n                    <Form.Input icon='search' placeholder='Paciente...' />\r\n                    <Form.Input icon='search' placeholder='M√©dico...' />\r\n                    <Dropdown placeholder='Especialidad' search selection fluid />\r\n                    <DateInput \r\n                        type=\"text\" \r\n                        placeholder=\"\"\r\n                        name=\"_edad\"\r\n                        value={formik.values._edad}\r\n                        onChange={formik.handleChange}\r\n                        error={formik.errors._edad}\r\n                    />\r\n                    <DateInput \r\n                        type=\"text\" \r\n                        placeholder=\"DNI\"\r\n                        name=\"_dni\"\r\n                        value={formik.values._dni}\r\n                        onChange={formik.handleChange}\r\n                        error={formik.errors._dni}\r\n                    />\r\n                    <Button type=\"submit\" primary className=\"btn-submit\">\r\n                        Grabar\r\n                    </Button>\r\n                </Form>\r\n            </Modal.Content>\r\n        </Modal>    \r\n    );\r\n}\r\n\r\nexport default ModalAddDoctor;",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":30,"column":8,"nodeType":"86","endLine":30,"endColumn":16,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"88","line":77,"column":8,"nodeType":"86","endLine":77,"endColumn":22,"suggestions":"89"},{"ruleId":"84","severity":1,"message":"90","line":29,"column":8,"nodeType":"86","endLine":29,"endColumn":21,"suggestions":"91"},{"ruleId":"84","severity":1,"message":"92","line":76,"column":8,"nodeType":"86","endLine":76,"endColumn":24,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":36,"column":25,"nodeType":"96","messageId":"97","endLine":36,"endColumn":29},{"ruleId":"94","severity":1,"message":"95","line":13,"column":22,"nodeType":"96","messageId":"97","endLine":13,"endColumn":26},{"ruleId":"94","severity":1,"message":"95","line":13,"column":22,"nodeType":"96","messageId":"97","endLine":13,"endColumn":26},{"ruleId":"94","severity":1,"message":"95","line":49,"column":25,"nodeType":"96","messageId":"97","endLine":49,"endColumn":29},{"ruleId":"94","severity":1,"message":"95","line":47,"column":25,"nodeType":"96","messageId":"97","endLine":47,"endColumn":29},{"ruleId":"94","severity":1,"message":"98","line":2,"column":36,"nodeType":"96","messageId":"97","endLine":2,"endColumn":41},{"ruleId":"94","severity":1,"message":"95","line":48,"column":25,"nodeType":"96","messageId":"97","endLine":48,"endColumn":29},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'update'. Either exclude it or remove the dependency array.","ArrayExpression",["101"],"React Hook useEffect has a missing dependency: 'dataTablePatient'. Either include it or remove the dependency array.",["102"],"React Hook useCallback has an unnecessary dependency: 'updateState'. Either exclude it or remove the dependency array.",["103"],"React Hook useEffect has a missing dependency: 'dataTable'. Either include it or remove the dependency array.",["104"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'Input' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"105","fix":"109"},{"desc":"110","fix":"111"},"Update the dependencies array to be: []",{"range":"112","text":"113"},"Update the dependencies array to be: [count, dataTablePatient, state]",{"range":"114","text":"115"},{"range":"116","text":"113"},"Update the dependencies array to be: [counter, dataTable, state]",{"range":"117","text":"118"},[1080,1088],"[]",[2417,2431],"[count, dataTablePatient, state]",[1033,1046],[2379,2395],"[counter, dataTable, state]"]